[{"C:\\Users\\Yusuf\\Desktop\\Clarusway\\Github-Projects\\weather-app-react\\src\\index.js":"1","C:\\Users\\Yusuf\\Desktop\\Clarusway\\Github-Projects\\weather-app-react\\src\\App.js":"2","C:\\Users\\Yusuf\\Desktop\\Clarusway\\Github-Projects\\weather-app-react\\src\\components\\DetailCard.js":"3","C:\\Users\\Yusuf\\Desktop\\Clarusway\\Github-Projects\\weather-app-react\\src\\components\\Header.js":"4","C:\\Users\\Yusuf\\Desktop\\Clarusway\\Github-Projects\\weather-app-react\\src\\components\\SummaryCard.js":"5"},{"size":220,"mtime":1664379056275,"results":"6","hashOfConfig":"7"},{"size":4595,"mtime":1664379056223,"results":"8","hashOfConfig":"7"},{"size":1354,"mtime":1664379056330,"results":"9","hashOfConfig":"7"},{"size":722,"mtime":1664379056357,"results":"10","hashOfConfig":"7"},{"size":868,"mtime":1664379056385,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1x8wg2y",{"filePath":"14","messages":"15","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"C:\\Users\\Yusuf\\Desktop\\Clarusway\\Github-Projects\\weather-app-react\\src\\index.js",[],"C:\\Users\\Yusuf\\Desktop\\Clarusway\\Github-Projects\\weather-app-react\\src\\App.js",["25","26"],"import { useState } from \"react\";\nimport DetailCard from \"./components/DetailCard\";\nimport Header from \"./components/Header\";\nimport SummaryCard from \"./components/SummaryCard\";\nfunction App() {\n  const API_KEY = process.env.REACT_APP_API_KEY\n\n  const [noData, setNoData] = useState('No Data Yet')\n  const [searchTerm, setSearchTerm] = useState('')\n  const [weatherData, setWeatherData] = useState([])\n  const [city, setCity] = useState('Unknown location')\n  const [weatherIcon, setWeatherIcon] = useState(`${process.env.REACT_APP_ICON_URL}10n@2x.png`)\n\n  const handleChange = input => {\n    const {value} = input.target\n    setSearchTerm(value)\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    getWeather(searchTerm)\n  }\n\n  const getWeather = async (location) => {\n    setWeatherData([])\n    let how_to_search = (typeof location === 'string') ? `q=${location}` : `lat=${location[0]}&lon=${location[1]}`\n\n    try {\n      let res = await fetch(`${process.env.REACT_APP_URL+how_to_search}\n      &appid=${API_KEY}&units=metric&cnt=5&exclude=hourly,minutely`)\n      let data = await res.json()\n      if(data.cod != 200) {\n        setNoData('Location Not Found')\n        return\n      }\n      setWeatherData(data)\n      setCity(`${data.city.name}, ${data.city.country}`)\n      setWeatherIcon(`${process.env.REACT_APP_ICON_URL + data.list[0].weather[0][\"icon\"]}@4x.png`)\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const myIP = (location) => {\n    const {latitude, longitude} = location.coords\n    getWeather([latitude, longitude])\n  }\n\n  return (\n    <div className=\"bg-gray-800 flex items-center justify-center w-screen h-screen py-10\">\n      <div className=\"flex w-3/4 min-h-full rounded-3xl shadow-lg m-auto bg-gray-100\">\n          {/* form card section  */}\n        <div className=\"form-container\">\n          <div className=\"flex items-center justify-center\">\n            <h3 className=\"my-auto mr-auto text-xl text-pink-800 font-bold shadow-md py-1 px-3 \n            rounded-md bg-white bg-opacity-30\">forecast</h3>\n            <div className=\"flex p-2 text-gray-100 bg-gray-600 bg-opacity-30 rounded-lg\">\n            <i className=\"fa fa-map my-auto\" aria-hidden=\"true\"></i>\n              <div className=\"text-right\">\n                <p className=\"font-semibold text-sm ml-2\">{city}</p>\n              </div>\n            </div>\n          </div>\n          <div className=\"flex flex-col items-center justify-center h-full\">\n            <h1 className=\"text-white text-2xl\">The Only Weather Forecast You Need</h1>\n            <hr className=\"h-1 bg-white w-1/4 rounded-full my-5\" />\n            <form noValidate onSubmit={handleSubmit} className=\"flex justify-center w-full\">\n              <input type=\"text\" \n                placeholder=\"Enter location\" \n                className=\"relative rounded-xl py-2 px-3 w-2/3 bg-gray-300 bg-opacity-60 text-white placeholder-gray-200\"\n                onChange={handleChange} \n                required />\n                <button type=\"submit\" className=\"z-10\">\n                  <i className=\"fa fa-search text-white -ml-10 border-l my-auto z-10 cursor-pointer p-3\" \n                  aria-hidden=\"true\" type=\"submit\"></i>\n                </button>\n              <i className=\"fa fa-map-marker-alt my-auto cursor-pointer p-3 text-white\" aria-hidden=\"true\" onClick={() => {\n                navigator.geolocation.getCurrentPosition(myIP)\n              }}></i>\n            </form>\n          </div>\n        </div>\n        {/* info card section  */}\n        <div className=\"w-2/4 p-5\">\n          <Header />\n          <div className=\"flex flex-col my-10\">\n            {/* card jsx  */}\n            {weatherData.length === 0 ? \n              <div className=\"container p-4 flex items-center justify-center h-1/3 mb-auto\">\n                <h1 className=\"text-gray-300 text-4xl font-bold uppercase\">{noData}</h1>\n              </div> :\n              <>\n                <h1 className=\"text-5xl text-gray-800 mt-auto mb-4\">Today</h1>\n                <DetailCard weather_icon={weatherIcon} data={weatherData} />\n                <h1 className=\"text-3xl text-gray-600 mb-4 mt-10\">More On {city}</h1>\n                <ul className=\"grid grid-cols-2  gap-2\">\n                  {weatherData.list.map( (days, index) => {\n                    if(index > 0){\n                    return (\n                      <SummaryCard key={index} day={days} />\n                    )\n                  }\n                  })}\n                </ul>\n              </>\n            }\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\Yusuf\\Desktop\\Clarusway\\Github-Projects\\weather-app-react\\src\\components\\DetailCard.js",["27"],"import moment from 'moment';\n\nfunction DetailCard({weather_icon, data}) {\n    const {clouds, main, weather} = data.list[0]\n\n    return (\n        <div className=\"container p-4 flex items-center justify-center shadow-lg rounded-lg bg-white h-1/3 mb-auto\">\n            <div className=\"my-auto\">\n            <p className=\"font-bold text-5xl text-pink-800 mb-2\">{Math.round(main.temp)}&deg;C</p>\n            <p className=\"text-4xl text-gray-800 tracking-widest\">{weather[0].main}\n                <img src={weather_icon} className=\"w-1/4 inline\" />\n            </p>\n            <p className=\"text-gray-400 text-xs uppercase tracking-widest\">{weather[0].description}</p>\n            <p className=\"tracking-wider\">{moment().format(\"dddd MMM YYYY\")}</p>\n            </div>\n            <div className=\"my-2 border-l-2 border-gray-100 p-2\">\n            <p className=\"text-gray-400 text-lg\">RealFeel: {Math.round(main.feels_like)}&deg;C</p>\n            <p className=\"text-gray-400 text-lg\">Humidity: {main.humidity}%</p>\n            <p className=\"text-gray-400 text-lg\">Cloud Cover: {clouds.all}%</p>\n            <p className=\"text-gray-400 text-lg\">Min Temp: {Math.round(main.temp_min)}&deg;C</p>\n            <p className=\"text-gray-400 text-lg\">Max Temp: {Math.round(main.temp_max)}&deg;C</p>\n            </div>\n        </div>\n    )\n}\n\n\n\nexport default DetailCard\n","C:\\Users\\Yusuf\\Desktop\\Clarusway\\Github-Projects\\weather-app-react\\src\\components\\Header.js",[],"C:\\Users\\Yusuf\\Desktop\\Clarusway\\Github-Projects\\weather-app-react\\src\\components\\SummaryCard.js",["28"],"import moment from 'moment'\n\nfunction SummaryCard({day}) {\n    let day_icon = `${process.env.REACT_APP_ICON_URL + day.weather[0][\"icon\"]}@2x.png`\n    return (\n        <li className=\"container p-4 flex items-center justify-center bg-gray-200 rounded-lg my-auto mr-1\">\n            <div className=\"my-auto\">\n                <p className=\"font-bold text-3xl text-pink-600 mb-2\">{Math.round(day.main.temp)}&deg;C</p>\n                <p className=\"text-2xl text-gray-800 tracking-widest\">{day.weather[0].main}\n                    <img src={day_icon} className=\"w-1/4 inline\" />\n                </p>\n                <p className=\"text-gray-400 text-xs uppercase tracking-widest\">{day.weather[0].description}</p>\n                <p className=\"tracking-wider\">{moment(day.dt_txt).format(\"dddd hh:mm\")}am</p>\n            </div>\n        </li>\n    )\n}\n\nexport default SummaryCard\n",{"ruleId":"29","severity":1,"message":"30","line":32,"column":19,"nodeType":"31","messageId":"32","endLine":32,"endColumn":21},{"ruleId":"33","severity":1,"message":"34","line":97,"column":56,"nodeType":"35","messageId":"36","endLine":97,"endColumn":58},{"ruleId":"37","severity":1,"message":"38","line":11,"column":17,"nodeType":"39","endLine":11,"endColumn":68},{"ruleId":"37","severity":1,"message":"38","line":10,"column":21,"nodeType":"39","endLine":10,"endColumn":68},"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]